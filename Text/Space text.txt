Spaceship s1;
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
Timer rockTimer;


void setup() {
  size(1000, 1000);
  s1 = new Spaceship();
  rockTimer = new Timer(1000);
  rockTimer.start();
}

void draw() {
  background(0);
  s1.display(mouseX, 800);
  if (rockTimer.isFinished()) {
    rocks.add(new Rock(int(random(width)), -50));
    rockTimer.start();
  }




  for (int i = 0; i < rocks.size(); i++) {
    Rock rock = rocks.get(i);
    rock.display();
    rock.move();
  }
  for (int i = lasers.size() - 1; i >= 0; i--) {
    Laser laser = (Laser) lasers.get(i);
    laser.fire();
    laser.display();
    if (laser.reachedTop()) {
      lasers.remove(laser);
    }
  }
}
void mousePressed() {
  lasers.add(new Laser(s1.x, s1.y-100));
  
}

void keyPressed() {
  println(key);
  println(keyCode);
  if (key == ' ') {
    lasers.add(new Laser(s1.x-30, s1.y));
    lasers.add(new Laser(s1.x+30, s1.y));
  }
}
class Laser {
  int x, y, w, speed;
  PImage laser;

  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 10;
    speed = 10;
    laser = loadImage("greenarrow.png");
  }

  void fire() {
    y-=speed;
  }

  void display() {
    laser.resize(100,100);
    imageMode(CENTER);
    image(laser, x, y);
    
  }

  boolean reachedTop() {
    if (y<-50) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  //Member Variables
  int x, y, w, h, speed, diam, health;
  PImage r1;
  int rand;


  //Constructor
  Rock(int x, int y) {
    this.x = x;
    this.y = y;
    w = 100;
    h = 100;

    speed = int(random(2, 15));
    diam = int(random(10, 35));
    health = diam;
    rand = int(random(1, 3));
    if (rand == 1) {
      r1 = loadImage("taiwan.png");
    } else if (rand == 2) {
      r1 = loadImage("redarrow.png");
    }
  }
  void display() {
    r1.resize(100, 100);
    imageMode(CENTER);

    image(r1, x, y);
  }

  void move() {
    y+=speed;
  }

  boolean reachedBottom() {
    if (y>height+50) {
      return true;
    } else {
      return false;
    }
  }

  boolean intersect(Spaceship s) {
    float distance = dist(x, y, s.x, s.y);
    if (distance < w/2 + s.w) {
      return true;
    } else {
      return false;
    }
  }
}
class Spaceship {
  int x, y, w, health, laserCount;
  PImage ship;

  Spaceship() {
    x = 0;
    y = 0;
    w = 80;
    ship = loadImage("johnxina.png");
  }

  void display(int tempX, int tempY) {
    x = tempX;
    y =  tempY;
    imageMode(CENTER);
    ship.resize(200, 150);
    image(ship, x, y);
  }

  void move() {
  }

  boolean fire() {
    if (laserCount>0) {
      return true;
    } else {
      return false;
    }
  }


  boolean intersect(Rock r) {
    float distance = dist(x, y, r.x, r.y);
    if (distance < w/2 + r.diam) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, diam, speed;



  Star() {
    x = int(random(width));
    y = -10;
    diam = int(random(1, 5));
    speed = int(random(1, 10));
  }
  
  void display() {}
  
  void move() {}
  
  boolean reachedBottom() {
    return true;
  }
}

// Example 10-5: Object-oriented timer

class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
  void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
  boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}
